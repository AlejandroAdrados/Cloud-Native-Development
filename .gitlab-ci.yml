# This file is a template, and might need editing before it works on your project.
# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/index.html#stages
#
# You can copy and paste this template into a new `.gitlab-ci.yml` file.
# You should not add this template to an existing `.gitlab-ci.yml` file by using the `include:` keyword.
#
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml
image: nikolaik/python-nodejs:python3.9-nodejs16-alpine

# variables:
#   PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"

# cache:
#   paths:
#     - frontend/node_modules/
#     - g7t2/.venv/
#     - .cache/pip

stages: # List of stages for jobs, and their order of execution
  - build
  - test

build-frontend: # This job runs in the build stage, which runs first.
  stage: build
  image: node:16-alpine
  script:
    - cd ./frontend
    - npm ci
    - npm run build
  # artifacts:
  #   paths:
  #     - frontend/dist/

lint-frontend: # This job also runs in the test stage.
  stage: test # It can run at the same time as unit-test-job (in parallel).
  image: node:16-alpine
  script:
    - cd ./frontend
    - npm ci -D
    - npm run lint

install-backend-dependencies:
  stage: build
  image: python:3.9
  script:
    - cd ./g7t2
    - python -m venv .venv
    - source .venv/bin/activate
    - pip install -r requirements.txt -r requirements-dev.txt

lint-backend: # This job runs in the test stage.
  stage: test # It only starts when the job in the build stage completes successfully.
  image: python:3.9
  script:
    - cd ./g7t2
    - pip install flake8
    - flake8

unit-test-backend:
  stage: test
  image: deligan/python-node:0.1
  tags:
    - arm64
  script:
    - cd ./g7t2
    - python -m venv .venv
    - source .venv/bin/activate
    - pip install -r requirements.txt -r requirements-dev.txt
    - python -m pytest tests --ignore=tests/unit/lambdas
    - cd ./lambdas # lambdas use relative imports, so we change dir to make this the root module
    - python -m pytest ../tests/unit/lambdas

aws-deploy-test:
  stage: test
  image: docker:20.10.16
  tags:
    - localstack
  services:
    - docker:20.10.16-dind
  variables:
    # LOCALSTACK_HOSTNAME: localstack
    EDGE_PORT: 4566
    LOCALSTACK_HOSTNAME: localhost.localstack.cloud
    LOCALSTACK_API_KEY: 4JRceJASMt
    AWS_ACCESS_KEY_ID: test
    AWS_SECRET_ACCESS_KEY: test
    AWS_DEFAULT_REGION: us-east-1
    LOCALSTACK_URL: http://localhost.localstack.cloud:4566
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: ""
  before_script:
    - cd ./g7t2
    - apk add curl python3 py3-pip python3-dev bind-tools nodejs npm
    - npm i -g aws-cdk-local aws-cdk@2.44.0
    - python3 -m venv .venv
    - source .venv/bin/activate
    - pip install awscli
    - pip install -r requirements.txt
    - mkdir ~/.aws/
    - touch ~/.aws/credentials
    - touch ~/.aws/config
    - aws configure set aws_access_key_id "$AWS_ACCESS_KEY_ID"
    - aws configure set aws_secret_access_key "$AWS_SECRET_ACCESS_KEY"
    - aws configure list
  script:
    - echo "$(cat /etc/hosts | grep docker | awk '{split($0, array); print array[1]}') localhost.localstack.cloud" >> /etc/hosts
    - docker run -d --rm -it -e LOCALSTACK_HOSTNAME=localhost.localstack.cloud -e LOCALSTACK_API_KEY=4JRceJASMt -e EDGE_PORT=4566 -p 4566:4566 -p 4510-4559:4510-4559 localstack/localstack
    - sleep 10
    - curl ${LOCALSTACK_URL}/_localstack/health
    - cdklocal bootstrap --ci --debug
    - cdklocal deploy --require-approval never --ci --debug
